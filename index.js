!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e,t){e.exports=React},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(2),s=i(0),a=i(3),r=i(11),l=i(12),o=i(13),c=new AudioContext,u=document.getElementById("canvas"),h=new a.default(u,c);class d extends s.Component{constructor(e){super(e)}render(){return s.createElement(s.Fragment,null,s.createElement("div",{className:"left"},s.createElement("div",null,s.createElement("span",null,"Volume: "),s.createElement(r.default,{callback:e=>h.audioEngine.setMasterGain(e)}),s.createElement("span",null,"Filter Freq: "),s.createElement(r.default,{callback:e=>h.audioEngine.setMasterFilterValue(e)}),s.createElement("span",null,"On/Off"),s.createElement(o.default,{callback:e=>{h.masterControlState=e}})),s.createElement("div",null,s.createElement("span",null,"Decay time"),s.createElement(r.default,{callback:e=>h.compositionEngine.setDecayTime(e),min:.5,max:8,step:.5}),s.createElement("span",null,"Octave"),s.createElement(r.default,{callback:e=>h.compositionEngine.globalRoot=e,min:0,max:6,step:1}),s.createElement("span",null,"Vibrato Rate"),s.createElement(r.default,{callback:e=>{h.audioEngine.setLfoFrequency(e)},min:0,max:1,step:.01})),s.createElement("div",null,s.createElement("span",null,"Filter Envelope Q"),s.createElement(r.default,{callback:e=>{h.audioEngine.filterEnvelopeQ=e},min:0,max:20,step:.01}),s.createElement("span",null,"Detune"),s.createElement(r.default,{callback:e=>{h.compositionEngine.detune=e},min:0,max:50,step:1}),s.createElement("span",null,"Filter Envelope"),s.createElement(r.default,{callback:e=>{h.audioEngine.setFilterEnvelopeStartFrequency(e)},min:0,max:1,step:.01}))),s.createElement("div",{className:"right"},s.createElement("div",null,s.createElement("span",null,"Current waveform: "),s.createElement(l.default,{callback:e=>{h.compositionEngine.oscialltorType=e},options:["sine","square","sawtooth","custom","triangle"]}),s.createElement("span",null,"Current scale: "),s.createElement(l.default,{callback:e=>{h.scale=e},options:["Ionian","Lydian","Locrian","Phrygian","Aeolean","Dorian","Mixolydian"]}),s.createElement("span",null,"Blend Mode: "),s.createElement(l.default,{callback:e=>{h.graphicsEngine.setBlendMode(e)},options:["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","copy","xor","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"]})),s.createElement("div",null,s.createElement("span",null,"Vibrato Amount"),s.createElement(r.default,{callback:e=>{h.audioEngine.frequencyModulationAmount=e},min:0,max:10,step:.01}),s.createElement("span",null,"amplitudeRelease"),s.createElement(r.default,{callback:e=>{h.audioEngine.amplitudeRelease=parseFloat(e)},min:.2,max:3,step:.01}))))}}requestAnimationFrame((function e(t){h.tick(t),requestAnimationFrame(e)})),n.render(s.createElement(d,null),document.getElementById("cubebox"))},function(e,t){e.exports=ReactDOM},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(4),s=i(5),a=i(7),r=i(8);t.default=class{constructor(e,t){this.audioEngine=new a.default(t),this.graphicsEngine=new s.default(e),this.compositionEngine=new r.default(this.audioEngine),this.masterControlState=!0,this.then=null,this.scale="Ionian"}tick(e){this.then||(this.then=e),(!this.then||e-this.then>this.compositionEngine.chordSpeed&&this.masterControlState)&&(this.play(),this.then=e),this.graphicsEngine.draw()}play(){this.compositionEngine.chordVoices.forEach((e,t)=>{const i=e.next().value;if(i){const e=n.default[this.scale][i];this.compositionEngine.notePressed(e,0),this.graphicsEngine.play(t,e)}}),this.compositionEngine.swipeVoices.forEach((e,t)=>{const i=e.next().value;if(i){const e=n.default[this.scale][i];this.compositionEngine.notePressed(e,.4*t),setTimeout(()=>this.graphicsEngine.play(t+4,e),.4*t*1e3)}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={Ionian:[0,2,4,5,7,9,11],Lydian:[0,2,4,6,7,9,11],Locrian:[0,1,3,5,6,8,10],Phrygian:[0,1,3,5,7,8,10],Aeolean:[0,2,3,5,7,8,10],Dorian:[0,2,3,5,7,9,10],Mixolydian:[0,2,4,5,7,9,10]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(6);t.default=class{constructor(e){this.canvas=e,this.ctx=this.canvas.getContext("2d"),this.unitSquare=33,this.squareOrigin=[this.unitSquare,this.unitSquare],this.squareSize=2*this.unitSquare,this.squares=[new n.default(this.ctx,[this.squareOrigin[0],this.squareOrigin[1],this.squareSize,this.squareSize],0),new n.default(this.ctx,[this.squareOrigin[0],this.squareOrigin[1]+this.unitSquare,this.squareSize,this.squareSize],1),new n.default(this.ctx,[this.squareOrigin[0]+this.unitSquare,this.squareOrigin[1],this.squareSize,this.squareSize],2),new n.default(this.ctx,[this.squareOrigin[0]+this.unitSquare,this.squareOrigin[1]+this.unitSquare,this.squareSize,this.squareSize],3),new n.default(this.ctx,[this.squareOrigin[0]+4*this.unitSquare,this.squareOrigin[1],this.squareSize,this.squareSize],4),new n.default(this.ctx,[this.squareOrigin[0]+4*this.unitSquare,this.squareOrigin[1]+this.unitSquare,this.squareSize,this.squareSize],5),new n.default(this.ctx,[this.squareOrigin[0]+5*this.unitSquare,this.squareOrigin[1],this.squareSize,this.squareSize],6),new n.default(this.ctx,[this.squareOrigin[0]+5*this.unitSquare,this.squareOrigin[1]+this.unitSquare,this.squareSize,this.squareSize],7)]}clearRect(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}setBlendMode(e){this.ctx.globalCompositeOperation=e}draw(){this.clearRect(),this.squares.forEach(e=>e.draw())}play(e,t){this.squares[e].play(t)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i){this.ctx=e,this.position=t,this.alpha=0,this.colors=[[255,0,0],[206,154,255],[255,255,0],[101,101,153],[227,251,255],[172,28,2],[0,204,255],[255,101,1],[255,0,255],[51,204,51],[140,138,140],[0,0,254]],this.note=i}draw(){this.alpha=this.alpha>0?this.alpha-1:this.alpha;const e=[...this.colors[this.note],this.alpha/100];this.ctx.fillStyle=`rgba(${e.join(",")})`;const[t,i,n,s]=this.position;this.ctx.fillRect(t,i,n,s)}play(e){this.alpha=70,this.note=e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.ctx=e,this.masterGain=this.ctx.createGain(),this.masterGain.connect(this.ctx.destination),this.masterFilter=this.ctx.createBiquadFilter(),this.masterFilter.type="lowpass",this.masterFilter.frequency.setValueAtTime(12e3,this.ctx.currentTime),this.masterFilter.Q.value=.01,this.masterFilter.connect(this.masterGain),this.sineTerms=new Float32Array([0,0,1,0,1]),this.cosineTerms=new Float32Array(this.sineTerms.length),this.masterFilter.connect(this.masterGain),this.lfoFreq=.01,this.filterEnvelopeQ=.01,this.filterEnvelopeStart=12e3,this.amplitudeRelease=.2,this.customWaveform=this.ctx.createPeriodicWave(this.cosineTerms,this.sineTerms),this.frequencyModulationAmount=3}playTone(e,t,i,n,s){const a=this.ctx.currentTime,r=this.ctx.createOscillator();"custom"==s?r.setPeriodicWave(this.customWaveform):r.type=s,r.frequency.value=e,r.detune.setValueAtTime(t,a+i);const l=this.ctx.createOscillator();l.type="sine",l.frequency.value=this.lfoFreq;const o=this.ctx.createGain();o.gain.value=this.frequencyModulationAmount;const c=this.ctx.createGain();c.gain.cancelScheduledValues(a+i),c.gain.setValueAtTime(0,a+i),c.gain.linearRampToValueAtTime(1,a+i+.1),c.gain.exponentialRampToValueAtTime(1e-8,a+i+n+this.amplitudeRelease);const u=this.ctx.createBiquadFilter();u.type="lowpass",u.Q.value=this.filterEnvelopeQ,u.frequency.setValueAtTime(this.filterEnvelopeStart,a),u.frequency.exponentialRampToValueAtTime(1e3,a+i+1),l.connect(o),o.connect(r.frequency),r.connect(c),c.connect(u),u.connect(this.masterFilter),l.start(a+i),r.start(a+i),r.stop(a+n+i),l.stop(a+n+i)}setMasterGain(e){this.masterGain.gain.value=this.expon(e)}setMasterFilterValue(e){this.masterFilter.frequency.setValueAtTime(this.exponOver(e,18500,400),this.currentTime())}setLfoFrequency(e){this.lfoFreq=this.exponOver(e,8,.001)}setFilterEnvelopeStartFrequency(e){this.masterFilter.frequency.setValueAtTime(this.exponOver(e,18500,1e3),this.currentTime())}exponOver(e,t,i){return this.expon(e)*t+i}expon(e){return 1-Math.sqrt(1-parseFloat(e))}currentTime(){return this.ctx.currentTime}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(9),s=i(10);t.default=class{constructor(e){this.noteFrequencies=s.noteFreq,this.decayTime=4,this.chordSpeed=1e3*this.decayTime,this.chordVoices=[n.urnJB(7),n.urnJB(7),n.urnJB(7),n.urnJB(7)],this.swipeVoices=[n.urnJB(7),n.urnJB(7),n.urnJB(7),n.urnJB(7)],this.audioEngine=e,this.detune=0,this.globalRoot=3}setDecayTime(e){this.decayTime=parseFloat(e),this.chordSpeed=1e3*this.decayTime}notePressed(e,t){const i=this.getStringNote(e),n=this.getNoteFrequencies(i);this.audioEngine.playTone(n,-this.detune,t,this.decayTime,this.oscialltorType),this.audioEngine.playTone(n,this.detune,t,this.decayTime,this.oscialltorType)}getStringNote(e){return Object.keys(this.noteFrequencies[this.globalRoot])[e]}getNoteFrequencies(e){return this.noteFrequencies[this.globalRoot][e]}}},function(e,t,i){"use strict";function n(e){let t=[];for(let i=0;i<e;i++)t[i]=i;for(let e=t.length-1;e>0;e--){const i=Math.floor(Math.random()*e),n=t[e];t[e]=t[i],t[i]=n}return t}Object.defineProperty(t,"__esModule",{value:!0}),t.urnJB=function*(e){let t=n(e),i=0;for(;;)yield t[i],(i+=1)===e&&(t=n(e),i=0)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.noteFreq=[{A:55,"A#":58.27047018976124,B:61.735412657015516,C:32.70319566257483,"C#":34.64782887210901,D:36.70809598967595,"D#":38.890872965260115,E:41.20344461410874,F:43.653528929125486,"F#":46.2493028389543,G:48.99942949771866,"G#":51.91308719749314},{A:110,"A#":116.54094037952248,B:123.47082531403103,C:65.40639132514966,"C#":69.29565774421802,D:73.4161919793519,"D#":77.78174593052023,E:82.40688922821748,F:87.30705785825097,"F#":92.4986056779086,G:97.99885899543732,"G#":103.82617439498628},{A:220,"A#":233.08188075904496,B:246.94165062806206,C:130.8127826502993,"C#":138.59131548843604,D:146.8323839587038,"D#":155.56349186104046,E:164.81377845643496,F:174.61411571650194,"F#":184.9972113558172,G:195.99771799087463,"G#":207.65234878997256},{A:440,"A#":466.1637615180899,B:493.8833012561241,C:261.6255653005986,"C#":277.1826309768721,D:293.6647679174076,"D#":311.1269837220809,E:329.6275569128699,F:349.2282314330039,"F#":369.9944227116344,G:391.99543598174927,"G#":415.3046975799451},{A:880,"A#":932.3275230361799,B:987.7666025122483,C:523.2511306011972,"C#":554.3652619537442,D:587.3295358348151,"D#":622.2539674441618,E:659.2551138257398,F:698.4564628660078,"F#":739.9888454232688,G:783.9908719634985,"G#":830.6093951598903},{A:1760,"A#":1864.6550460723597,B:1975.5332050244965,C:1046.5022612023945,"C#":1108.7305239074883,D:1174.6590716696303,"D#":1244.5079348883237,E:1318.5102276514797,F:1396.9129257320155,"F#":1479.9776908465376,G:1567.981743926997,"G#":1661.2187903197805},{A:3520,"A#":3729.3100921447194,B:3951.066410048993,C:2093.004522404789,"C#":2217.4610478149766,D:2349.3181433392606,"D#":2489.0158697766474,E:2637.0204553029594,F:2793.825851464031,"F#":2959.955381693075,G:3135.963487853994,"G#":3322.437580639561}]},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(0);class s extends n.Component{constructor(e){super(e),this.callback=e.callback,this.min=e.min,this.max=e.max,this.step=e.step}render(){return n.createElement("input",{type:"range",min:this.min.toString(),max:this.max.toString(),step:this.step.toString(),onChange:e=>this.callback(e.target.value)})}}s.defaultProps={min:0,max:1,step:.01},t.default=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(0);class s extends n.Component{constructor(e){super(e),this.options=e.options,this.callback=e.callback}render(){return n.createElement("select",{onChange:e=>this.callback(e.target.value)},this.options.map(e=>n.createElement("option",{key:e,value:e},e)))}}t.default=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(0);class s extends n.Component{constructor(e){super(e),this.callback=e.callback}render(){return n.createElement("input",{type:"checkbox",onChange:e=>this.callback(e.target.checked)})}}t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,